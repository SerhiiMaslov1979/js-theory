Формат JSON.

JSON (JavaScript Object Notation) - сучасний текстовий формат зберігання і передачі структурованих даних у текстовій 
формі. Звичний об'єктоподібний синтаксис JSON - дуже зручний. Саме у цьому форматі дані будуть приходити і відправлятися 
на сервер, зберігатися в локальному сховищі тощо.

Але JSON - це не об'єкт, а його рядкове відображення. Нижче наведено приклад JSON файлу. Синтаксис схожий на об'єкт, 
за винятком того, що ключі - це завжди рядки у подвійних лапках. Рядкові значення також обов'язково повинні бути взяті 
у подвійні лапки. Значеннями властивостей можуть бути типи: string, number, object, array, boolean і null.

user.json

{
  "name": "Josh",
  "weight": 175,
  "age": 30,
  "eyecolor": "brown",
  "isHappy": true,
  "cars": ["Chevy", "Honda"],
  "favoriteBook": {
    "title": "The Last Kingdom",
    "author": "Bernard Cornwell",
    "rating": 8.38
  }
}

    Javascript і JSON чудово працюють разом, завдяки методам вбудованого класу JSON, які перетворюють JavaScript об'єкт 
у JSON і навпаки. Незалежно від того, що у вас є, можна легко отримати зворотне.

    Метод JSON.stringify()

    Приймає значення і перетворює його у JSON. Значенням може бути число, буль, null, масив або об'єкт. Рядки - це 
вже валідний JSON, тому в їх перетворенні немає сенсу.

const dog = {
  name: "Mango",
  age: 3,
  isHappy: true,
};

const dogJSON = JSON.stringify(dog);
console.log(dogJSON); // "{"name":"Mango","age":3,"isHappy":true}"

    Результат виклику JSON.stringify(dog) - це валідний JSON (рядок), який може бути збережений у файл або переданий 
мережею.

    Не будь-який JavaScript об'єкт може бути перетворений один до одного у JSON. Наприклад, якщо в об'єкта є методи, то 
при перетворенні вони будуть проігноровані.

const dog = {
  name: "Mango",
  age: 3,
  isHappy: true,
  bark() {
    console.log("Woof!");
  },
};

const dogJSON = JSON.stringify(dog);
console.log(dogJSON); // "{"name":"Mango","age":3,"isHappy":true}"

    Також, при спробі перетворити функцію в JSON, результатом буде undefined.

JSON.stringify(() => console.log("Well, this is awkward")); // undefined

    Метод JSON.parse()

    Щоб отримати з JSON валідне JavaScript значення, його необхідно розпарсити (parse). Це операція зворотна 
перетворенню в рядок (stringify). Тепер, коли dog - це валідний об'єкт, з ним можна працювати звичайним чином.


const json = '{"name":"Mango","age":3,"isHappy":true}';

const dog = JSON.parse(json);
console.log(dog); // {name: "Mango", age: 3, isHappy: true}
console.log(dog.name); // "Mango"


    Обробка помилок.


    Якщо методам класу JSON передати невалідний JSON, то вони «викинуть» помилку і весь скрипт впаде. Для уникнення 
цього, використовується конструкція try...catch, яка дозволяє «ловити» і обробляти помилки виконання скрипта.

try {
  // Code that may throw a runtime error
} catch (error) {
  // Error handling
}


1. Спочатку виконується код всередині блоку try.
2. Якщо помилки відсутні, блок catch ігнорується і управління передається далі.
3. Якщо в блоці try сталася помилка, його виконання зупиняється та інтерпретатор переходить до блоку catch.

Змінна error - це об'єкт помилки з інформацією про те, що сталося. У цього об'єкта є кілька корисних властивостей:

- name - тип помилки. Для помилки парса - це SyntaxError.
- message - повідомлення про деталі помилки.
- stack - стек викликів функцій на момент помилки. Використовується для налагодження.

    Наприклад, парс рядка призведе до такого сценарію, тому що рядок з символами - це невалідний JSON, оскільки не 
може бути перетворений у валідне JavaScript значення.

// Script will crash during parse
const data = JSON.parse("Well, this is awkward");
console.log("❌ You won't see this log");

    Використовуючи конструкцію try...catch, ми можемо обробити цей виняток таким чином, щоб скрипт продовжив працювати, 
навіть у разі помилки.

try {
  const data = JSON.parse("Well, this is awkward");
} catch (error) {
  console.log(error.name); // "SyntaxError"
  console.log(error.message); // Unexpected token W in JSON at position 0
}

console.log("✅ This is fine, we handled parse error in try...catch");

    Те саме буде при спробі парса невалідного JSON, який, наприклад, може прийти з бекенду або бути прочитаний з файлу. 
У прикладі у властивості username бракує подвійних лапок.

try {
  const data = JSON.parse('{username: "Mango"}');
} catch (error) {
  console.log(error.name); // "SyntaxError"
  console.log(error.message); // "Unexpected token u in JSON at position 1"
}

console.log("✅ This is fine, we handled parse error in try...catch");

    Фази виконання коду.

    В JavaScript код виконується не відразу, для початку рушію потрібно прочитати код і дізнатися, чи можливо його 
взагалі виконати.

    Фаза інтерпретації або оцінки (compile time, evaluation time) - підготовка перед виконанням коду, рушій знаходить 
синтаксичні помилки, помилки типізації тощо. Тобто код ще не виконується, тільки оцінюється. Якщо ця фаза пройшла 
успішно, це як мінімум означає, що в коді відсутні синтаксичні помилки і його можна запустити для виконання.

    Фаза виконання (runtime) - скрипт починає виконуватися, виконуються інструкції викликів функцій і оцінки виразів, 
відбувається пошук необхідних ідентифікаторів у відповідних областях видимості тощо.

    Якщо ця фаза завершилася успішно, отже скрипт написаний без явних помилок і завершив свою роботу. На цій фазі можуть 
бути помилки, пов'язані з відсутніми властивостями і змінними, перетворенням типів тощо, тобто щось, що відбувається 
тільки під час виконання коду.

    Спробуйте виконати наступний код. Оскільки ми зробили помилку і замість const намагаємося оголосити змінну value 
ключовим словом cos, на фазі компіляції буде виявлена ​​синтаксична помилка і фаза виконання навіть не запуститься. В 
консолі ми відразу побачимо повідомлення про помилку.

console.log('This message will not appear in the console');

cos value = 5;



    ЦІКАВО.
    try...catch ловить тільки помилки, які виникли під час виконання коду (runtime errors). Це означає, що код повинен 
бути синтаксично правильним, інакше фаза виконання просто не запуститься. Помилки, які виникають під час фази оцінки, 
називаються помилками парсингу.


------------------------------------------------------------------------------------------------------------------------


    Веб-сховище.

    Щоразу, коли ви змінюєте тему кольорів між світлою і темною, переглядаєте відео, додаєте товар у корзину, 
відкриваєте або закриваєте сайдбар, популярні веб-застосунки запам'ятовують стан інтерфейсу і у наступному відвідуванні 
відновлюють його.

    За замовчуванням стан інтерфейсу зберігається в пам'яті вкладки браузера і втрачається після закриття веб-застосунку. 
Щоб уникнути цього, необхідно десь зберегти дані про стан інтерфейсу між відвідуваннями сторінки. На допомогу приходить 
зберігання інформації про стан веб-застосунку на комп'ютері користувача.


    Web Storage API.

    Веб-сховище складається з локального сховища (localStorage) і сховища сеансів (sessionStorage). Забезпечує спосіб 
зберігання даних інтуїтивно зрозумілим чином у вигляді пар ключ:значення. Технічно у веб-сховище можна записати тільки 
рядки, але це не проблема, якщо використовувати методи класу JSON для перетворення складних типів. У веб-сховище не 
записують методи об'єктів або функції, тільки дані.

    Локальне сховище (localStorage) - унікальне для кожного веб-застосунку і буде однаковим на декількох вкладках, в яких 
він (веб-застосунок) запущений. Дані в локальному сховищі не видаляються, навіть після закриття браузера або вимкнення 
комп'ютера. Щоб їх видалити, необхідно використовувати JavaScript.

    Сховище сеансів (sessionStorage) схоже на локальне - воно також унікальне для кожного веб-застосунку, але час життя 
збережених даних обмежений сесією вкладки браузера. Щойно користувач закриває вкладку або браузер, дані очищаються. На 
практиці сховище сеансів використовується значно рідше.

    ЦІКАВО.

    У веб-сховищі не зберігають паролі, номери банківських карт і подібну конфіденційну інформацію. Якщо шкідливий 
скрипт отримає доступ до веб-сторінки, він без проблем прочитає ці дані.


    Локальне сховище.

    Дозволяє зберігати дані без закінчення терміну дії у форматі пар ключ: значення на комп'ютері користувача і читати 
їх при повторному відвідуванні сторінки. Локальне сховище і сховище сесії - це частина браузера, тому вони доступні як 
властивості об'єкта window, мають однаковий набір властивостей і методів, і відрізняються тільки поведінкою.

- setItem(key, value) - створює новий, або оновлює вже існуючий запис у сховищі.
- getItem(key) - повертає зі сховища значення з ключем key.
- removeItem(key) - видаляє зі сховища запис з ключем key.
- clear() - повністю очищає всі записи сховища.
- length - кількість записів у сховищі.


    Збереження.
    
    Використовуючи метод setItem(key, value), можна додати новий запис у вигляді пари ключ:значення.

localStorage.setItem("ui-theme", "light");
localStorage.setItem("sidebar", "expanded");
localStorage.setItem("notification-level", "mute");

    Якщо необхідно зберегти щось, крім рядка, наприклад, масив або об'єкт, необхідно перетворити їх у рядок методом 
JSON.stringify().


const settings = {
  theme: "dark",
  isAuthenticated: true,
  options: [1, 2, 3],
};

localStorage.setItem("settings", JSON.stringify(settings));


    Читання.

    Метод getItem(key) дозволяє прочитати зі сховища запис з ключем key. Якщо у сховищі відсутній запис з таким ключем, 
метод повертає null. Якщо значення - це звичайний рядок, немає потреби його парсити.

localStorage.setItem("ui-theme", "dark");

const theme = localStorage.getItem("ui-theme");
console.log(theme); // "dark"

    В іншому випадку, необхідно розпарсити значення методом JSON.parse(), щоб отримати валідні дані.

const settings = {
  theme: "dark",
  isAuthenticated: true,
  options: [1, 2, 3],
};

localStorage.setItem("settings", JSON.stringify(settings));

const savedSettings = localStorage.getItem("settings");
const parsedSettings = JSON.parse(savedSettings);
console.log(parsedSettings); // settings object


    ЦІКАВО.

    Не забувайте використовувати конструкцію try...catch з методом JSON.parse(), щоб уникнути «падіння» скрипту, якщо 
раптом прочитали невалідний JSON.

    Видалення.

    Метод removeItem(key) видаляє зі сховища вже існуючий запис з ключем key.

localStorage.setItem("ui-theme", "dark");
console.log(localStorage.getItem("ui-theme")); // "dark"

localStorage.removeItem("ui-theme");
console.log(localStorage.getItem("ui-theme")); // null

    Очищення сховища.

    Операція повного очищення сховища - небезпечна, оскільки може порушити записи, зроблені іншими розробниками проекту. 
Проте, якщо ви хочете повністю очистити сховище, потрібно викликати метод clear().

localStorage.setItem("ui-theme", "light");
localStorage.setItem("sidebar", "expanded");
localStorage.setItem("notification-level", "mute");
console.log(localStorage.getItem("ui-theme")); // "light"
console.log(localStorage.getItem("sidebar")); // "expanded"
console.log(localStorage.getItem("notification-level")); // "mute"

localStorage.clear();
console.log(localStorage.getItem("ui-theme")); // null
console.log(localStorage.getItem("sidebar")); // null
console.log(localStorage.getItem("notification-level")); // null


    Зберігаємо повідомлення.

    Створимо форму для введення повідомлення і будемо зберігати його в localStorage по сабміту. Змінюйте значення 
текстового поля і натискайте кнопку «Save». Текст в полі виведення зміниться на введений. Перезавантажте сторінку, 
і ви побачите той самий текст, хоча нічого ще не вводили. При завантаженні сторінки ми беремо з localStorage останнє 
збережене значення. Спочатку такий запис у сховищі відсутній, тому буде виведений порожній рядок.

HTML

<p>Value from localStorage: <span id="output"></span></p>
<form id="message-form">
  <input type="text" class="input" name="message">
  <button type="submit" class="btn">Save</button>
</form>

CSS

body {
  padding: 16px;
}

p {
  margin-bottom: 0;
}


JS

HTML CSS JSResult Skip Results Iframe
EDIT ON
const form = document.querySelector("#message-form");
const output = document.querySelector("#output");
const LOCALSTORAGE_KEY = "goit-example-message";

updateOutput();
form.addEventListener("submit", saveMessage);

function saveMessage(evt) {
  evt.preventDefault();
  localStorage.setItem(LOCALSTORAGE_KEY, form.elements.message.value);
  updateOutput();
  form.reset();
}

function updateOutput() {
  output.textContent = localStorage.getItem(LOCALSTORAGE_KEY) || "";
}

    Подивитися вміст веб-сховища можна в інструментах розробника на вкладці Application. Там само ви можете вручну 
видаляти і додавати записи. На практиці це використовується під час розробки та налагодження роботи застосунку.


    Сервіс для localStorage.


    Для того, щоб скоротити кількість повторюваного коду при роботі з веб-сховищем, можна написати сервіс зі 
стандартними методами, наприклад, save і load. Вони будуть абстрагувати повторюваний код перевірки помилок парса 
і подібну рутину.

storage.js

const save = (key, value) => {
  try {
    const serializedState = JSON.stringify(value);
    localStorage.setItem(key, serializedState);
  } catch (error) {
    console.error("Set state error: ", error.message);
  }
};

const load = key => {
  try {
    const serializedState = localStorage.getItem(key);
    return serializedState === null ? undefined : JSON.parse(serializedState);
  } catch (error) {
    console.error("Get state error: ", error.message);
  }
};

export default {
  save,
  load,
};

    Тепер ми можемо безпечно додавати і читати записи з локального сховища. Спробуйте самостійно дописати метод 
remove(key) для видалення запису, аналогічно load(key) і save(key, value).

