Node.js

Node.js - легке та ефективне середовище виконання JavaScript. Дозволяє писати високопродуктивні серверні застосунки 
та інструменти.
Node.js побудована на JavaScript-рушію V8 і написана на C++.

    Спочатку Node.js створювалася як серверне оточення для застосунків, але розробники почали використовувати її для 
створення інструментів, які допомагають автоматизувати виконання локальних завдань. В результаті нова екосистема 
інструментів, яка виникла навколо Node.js, призвела до трансформації процесу фронтенд-розробки.

    Встановлення.

    Щоб встановити останню стабільну версію, перейдіть на офіційну сторінку, завантажте LTS-інсталятор і дотримуйтесь 
вказівок. Існують інсталятори для всіх популярних операційних систем - Windows, MacOS і Linux.

    ЦІКАВО.
    Користувачам Windows необхідно вибрати чекбокси для встановлення всіх додаткових інструментів, крім Chocolatey. 
Це встановить Python і різноманітні допоміжні утиліти і компілятори.

    Після встановлення в терміналі буде доступна команда node. Щоб переконатися, що встановлення пройшло успішно, 
перевірте версію, запустивши в консолі команду node з прапорцем version.

node --version

    JavaScript поза браузером.

    Node.js дозволяє виконувати JavaScript-код поза браузером. Відкрийте будь-який термінал і виконайте команду node, 
запуститься REPL (read-eval-print loop) - інтерактивне середовище виконання JS-коду. Виведемо щось в консоль.

    ЦІКАВО.
    Для того, щоб вийти з REPL, натисніть комбінацію Ctrl + C на Windows і Control + C на MacOS.

    Тепер створимо папку node-tut, а в ній - файл index.js з кодом, який ми писали в REPL. Для запуску потрібно 
відкрити термінал і перейти в папку node-tut, в якій лежить index.js.

// index.js
const message = "NodeJS in amazing!";
console.log(message);

    Тепер в консолі запускаємо файл за допомогою команди node index.js і отримуємо такий самий результат - виведення 
рядка безпосередньо в терміналі.

    В цьому і полягає суть Node.js - можливість виконувати JavaScript поза браузером. Таким чином можна писати цілі 
застосунки, наприклад, бекенд або утиліти, що не залежать від браузера.

-------------------------------------------------------------------------------------------------------------------------

    Пакетний менеджер npm.

    Щоб використовувати все різноманіття інструментів (або пакетів) Node.js, нам необхідна можливість встановлювати 
і керувати ними. Для цього створений NPM (node ​​package manager) - пакетний менеджер Node.js. Він встановлює потрібні 
пакети і забезпечує зручний інтерфейс для роботи з ними.

NPM складається з трьох основних компонентів:

- Сайт npmjs.com - використовується для пошуку та ознайомлення з документацією пакетів.

- Інтерфейс командного рядка (CLI) - запускається з терміналу і надає набір команд для роботи з реєстром і пакетами. 
Дозволяє створювати скрипти для запуску в терміналі.

- Реєстр пакетів (registry) - велика загальнодоступна база даних інструментів розробки (пакетів).
Пакет (package) - невелика JavaScript бібліотека, що вирішує специфічне завдання. Пакети пишуть самі розробники і 
діляться зі спільнотою. Такий підхід спрощує життя, тому що не потрібно винаходити колесо, всі колеса вже давно лежать 
на полицях реєстру і готові до використання.

    ЦІКАВО.
    Пакети абстрагують реалізацію функціоналу, надаючи розробнику зручний інтерфейс. Це робить код чистішим, читабельнішим 
і дозволяє простіше його підтримувати.

    Команди NPM.

    Відразу перелічимо основні команди і будемо послідовно використовувати і розглядати в деталях.

npm init - ініціалізує npm в проекті і створює файл package.json
npm install - встановлює всі залежності, перелічені в package.json
npm list --depth=0 - виведе в терміналі список локально встановлених пакетів з номерами їх версій, без залежностей
npm install [package-name] - встановить пакет локально у папку node_modules
npm uninstall [package-name] - видалить пакет, встановлений локально і оновить package.json
npm start і npm test - запустить скрипт start або test, розташований в package.json
npm run [custom-script] - запустить кастомний скрипт, розташований в package.json
npm outdated - використовується для пошуку оновлень, виявить сумісні версії програмно і виведе список доступних оновлень
npm update - оновить всі пакети до максимально дозволеної версії

Документація NPM https://docs.npmjs.com/

    Ініціалізація проекту.

    Кожен проект починається зі створення файлу package.json - він відстежує залежності, містить службову інформацію, 
дозволяє писати npm-скрипти і слугує інструкцією під час створення нового проекту на основі вже готових налаштувань. 
Файл package.json можна створити npm-командою init, що ініціалізує проект в цій папці.

npm init

    Вам буде запропоновано ввести назву проекту, версію, опис тощо. Можна просто натискати Enter доти, доки не буде 
створений package.json і розміщений в папці проекту. Щоб не натискати Enter, пропускаючи порожні поля, використовується 
команда init з прапорцем --yes. Прапорець - додаткове налаштування для команди.

npm init --yes

    ЦІКАВО.
У кожного прапорця є псевдонім - його скорочений запис. Псевдонім прапорця --yes - -y, тому команди npm init --yes і 
npm init -y роблять одне і те ж.

    Буде створено package.json зі значеннями за замовчуванням. Щоб встановити ці значення, виконайте в терміналі 
послідовно наступні команди, підставивши своє ім'я та пошту.

npm config set init.author.name "YOUR_NAME"
npm config set init.author.email "YOUR_EMAIL"

    Файл package.json можна редагувати вручну або виконати npm init ще раз. Якщо відкрити package.json в редакторі, він 
буде виглядати приблизно так. Це всього лише метадані про проект.

    package.json

{
  "name": "node-tut",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Alexander Repeta <mycoolemail@mail.com>",
  "license": "ISC",
  "keywords": [],
  "description": ""
}

    npm-скрипти.

    Скрипти дозволяють запускати для виконання встановлені пакети. Використовуючи npm-скрипти, можна створювати цілі 
системи збирання проекту. Автоматизуємо запуск index.js. Для цього у файлі package.json в полі scripts додамо скрипт 
запуску start.

    package.json

{
  "scripts": {
    "start": "node index.js"
  }
}


Тепер ми можемо запустити його в терміналі командою npm start.

УВАГА.
Якщо створити скрипт з будь-яким іншим ім'ям, крім start або test, він буде запускатися як npm run ім'я-скрипта - не 
забудьте run.
Ознайомтесь з документацією - How npm handles the "scripts" field.

    Встановлення пакетів.

Одна з можливостей, які надає npm - встановлення пакетів, які витягуються з реєстру і розпаковуються в папку 
node_modules в корені проекту. 
Після створення файлу package.json, можна додати залежності в проект.

Залежністю називають npm-пакет, який використовується у розробці. Це різноманітні утиліти і бібліотеки. 
Встановимо бібліотеку validator.js для валідації рядків, наприклад, введення користувача в поля форми.

npm install validator

NPM завантажив validator і помістив його в node_modules - папку, в якій будуть знаходитися всі зовнішні залежності.

    УВАГА
Не додавайте папку node_modules в систему контролю версій, у всіх розробників вона буде своя. 
Якщо ви використовуєте Git, не забувайте додати папку node_modules у файл .gitignore.


    Зверніть увагу на створений файл package-lock.json - це журнал знімків дерева залежностей проекту. 
Він гарантує, що команда розробників використовує однакові версії залежностей. 
NPM автоматично оновлює його під час додавання, видалення та оновлення пакетів.

    В package.json з'явилася нова залежність в полі dependencies. 
Це означає, що validator версії 11.1.0 був встановлений як залежність і готовий до роботи. 
Пакети постійно оновлюються, ваша версія може відрізнятися.

package.json

{
  "dependencies": {
    "validator": "^11.1.0"
  }
}

    Щоб отримати інтерфейс пакета в Node.js-коді, необхідно викликати функцію require("ім'я-модуля"), передаючи аргументом 
їй ім'я модуля без визначення шляху - це називається абсолютний імпорт. Шлях не потрібен, оскільки за замовчуванням 
пошук модуля буде відбуватися в папці node_modules. Результатом свого виконання функція поверне інтерфейс 
модуля - об'єкт з методами або просто функцію - залежить від пакета.

index.js

const validator = require("validator");

const validateEmail = email => {
  return validator.isEmail(email);
};

console.log(
  "Is mango@mail.com a valid email?: ",
  validateEmail("mango@mail.com")
);

console.log(
  "Is Mangozedog.com a valid email?: ",
  validateEmail("Mangozedog.com")
);

Виконавши в терміналі npm start, отримаємо.

Is mango@mail.com a valid email?: true
Is Mangozedog.com a valid email?: false

    Видалення пакетів.

Припустимо, що версія validator, встановлена в попередньому прикладі, викликає проблеми з сумісністю. 
Ми можемо видалити цей пакет і поставити старішу версію.

npm uninstall validator

    Встановлення певної версії пакета.

Тепер встановимо потрібну версію validator. У команді встановлення номер версії вказується після символу @.

npm install validator@1.0.0

    ЦІКАВО
Встановлення пакетів певної версії використовується в комерційних проектах для того, щоб гарантувати роботу кодової 
бази і можливість довгострокової підтримки. Ви можете встановлювати найостанніші версії.

    Типи залежностей.

    Уявіть торт. Для його приготування шефу потрібні продукти, саме вони увійдуть до складу торта. 
Але для приготування потрібні будуть також інструменти на зразок мисок, ложок, лопаток тощо. А ще на кухні є столи 
і печі, холодильники тощо - те, що використовується для приготування будь-якої страви, загальні інструменти, які є 
на кухні.

    Те ж саме і з залежностями проекту - деякі будуть використані у фінальному продукті, інші необхідні тільки на 
стадії розробки, а є й такі, які необхідно використовувати, незалежно від проекту.

    Саме для цього команди npm install і npm uninstall мають три прапорці.

--save - вказує, що додається залежність, яка увійде до фінального продукту. Пакет буде встановлений локально, 
в папку node_modules і буде доданий запис в поле dependencies в package.json.
--save-dev - вказує, що додається залежність розробки. Пакет буде встановлений локально в папку node_modules, 
і буде доданий запис в поле devDependencies в package.json.
--global - вказує, що додається глобальна залежність, тобто інструмент, який доступний для будь-якого проекту. 
Пакет буде встановлений глобально (в систему).

    ЦІКАВО
    - Якщо не вказувати прапорець, буде використаний --save за замовчуванням.
    - Видаляючи пакет, необхідно вказувати правильний прапорець, такий самий, що й для встановлення.
    - Не встановлюйте пакети глобально, якщо ви працюєте на проекті з іншими розробниками.

    Управління версіями пакетів.

    Пакети мають пов'язаний з ними номер версії. Номери версій відповідають стандарту SemVer.

npm outdated - використовується для пошуку оновлень, виявить сумісні версії програмно.
npm update - оновить всі пакети до максимально дозволеної версії.
npm update [ім'я-пакета] - оновить зазначений пакет.

    ЦІКАВО.
Якщо ви не довіряєте машинам або вам потрібна певна версія пакету, можна відкрити package.json і вручну поміняти версії 
пакетів, після чого виконати npm install.

    Управління кешем.

    Після встановлення пакета npm зберігає його копію в кеші, тому під час наступного встановлення, вам не потрібно 
знову завантажувати його з інтернету. Кеш зберігається в папці .npm вашого домашнього каталогу.

    Ця папка з часом засмічується старими пакетами і її корисно іноді очищати, не дуже часто (декілька разів на рік). 
Кешування корисне, тому що скорочує час встановлення вже використаних пакетів. 

npm cache clean

-------------------------------------------------------------------------------------------------------------------------

    Модульність коду.

    Концепція модулів як способу організації коду існувала давно. Зі збільшенням проекту і його кодової бази, 
її намагаються розбити на файли, у кожному з яких описується окремий функціонал.

    Модульний код допомагає в організації, обслуговуванні, тестуванні і, найголовніше, управлінні залежностями. 
Найважливіші переваги модулів - це підтримка, простір імен і повторне використання.

    Підтримка - добре розроблений модуль, покликаний максимально зменшити залежність від інших частин коду. 
Це дозволить розширювати функціонал застосунку, не побоюючись порушити його роботу в цілому. Оновлення одного модуля 
набагато простіше, якщо модуль - самодостатній.

    Простір імен - змінні, що не входять в область видимості функції, є глобальними. Внаслідок цього, як правило, 
відбувається забруднення простору імен, де повністю непов'язаний код розділяє глобальні змінні. Модулі дозволяють 
уникнути забруднення простору імен, створюючи окрему область видимості для змінних.

    Повторне використання - усі розробники копіювали готовий код у нові проекти, змінюючи його під специфіку проекту. 
Це, очевидно, величезна трата часу. Набагато краще, коли є модуль, який можна повторно використовувати знову і знову, 
без необхідності знати що-небудь про оточення, в якому він використовується.


    Збирання модулів.

    Збирання модулів - це процес конкатенації групи модулів і їх залежностей в один або групу файлів.

    Зазвичай код ділять на папки і файли, до того ж необхідно підключити зовнішні бібліотеки. В результаті кожен з цих 
файлів потрібно додати в основний HTML-файл в тезі <script>, який потім завантажується браузером.

    Наявність окремих тегів <script> для кожного файлу означає, що браузер буде завантажувати кожен файл окремо, що 
негативно позначається на швидкості завантаження сторінки. Щоб обійти цю проблему, файли об'єднуються в один або пару 
файлів з метою зменшення кількості запитів. Але залишається проблема управління залежностями між модулями.

    Якщо використовуються системи модулів, такі як CommonJS або ESM, необхідно використовувати інструмент для їх 
перетворення у правильно впорядкований і доступний для браузера код. Саме тут починають діяти Webpack та інші бандлери 
(від англійського bundle).

    ECMAScript Modules (ESM).

    Донедавна в мові не було вбудованої модульної системи. ESM мають компактний декларативний синтаксис і можливість 
асинхронного завантаження. ES-модуль - це фрагмент JS-коду, що використовується багато раз та експортує певні об'єкти, 
роблячи їх доступними для інших модулів.

greeter.js

const helloMessage = "hello!";
const goodbyeMessage = "goodbye!";

export const hello = () => helloMessage;
export const goodbye = () => goodbyeMessage;

index.js

import { hello, goodbye } from "./greeter";

console.log(hello()); // "hello!"
console.log(goodbye()); // "goodbye!"

    Кожен JS-файл зберігає код в унікальному контексті модуля та імпортує необхідні йому залежності, і експортує все, 
що інші модулі повинні імпортувати. Операції експорту/імпорту реалізовані конструкціями import і export. 
Є дві очевидні переваги цього підходу - запобігання забрудненню глобального простору імен і явне зазначення залежностей.

    Нова система модулів відрізняється від CommonJS та інших, перш за все тим, що це стандарт. А значить, з часом, 
буде повністю підтримуватися браузерами нативно, без додаткових інструментів. Однак, зараз браузерна підтримка - неповна,
тому ESM використовуються разом з інструментами збірки модулів, такими як Webpack, Parcel та іншими.

    ЦІКАВО.
    ESM розроблені з урахуванням статичного аналізу. Це означає, що під час імпорту модулів, імпорт обробляється під час 
компіляції, тобто до запуску скрипту. Це дозволяє видаляти експорт, який не використовується іншими модулями, перш ніж 
запускати скрипт, що може призвести до значної економії ваги JS-файлу, зменшивши навантаження на браузер. 
Це називається tree shaking і виконується бандлерами автоматично під час збирання JS коду.

    Named export.

    Модуль може експортувати декілька сутностей, які відрізняються своїми іменами і називаються іменованими експортами. 
Щоб імпортувати їх в інший модуль, необхідно знати імена експортованих сутностей, які ми хочемо імпортувати.

    Перший спосіб - це використовувати ключове слово export перед усіма сутностями, які необхідно експортувати. 
Вони будуть додані як властивості в експортований об'єкт. Під час імпорту ми деструктуризуємо властивості з імпортованого 
об'єкта.

my-module.js

const sqrt = Math.sqrt;
export const square = x => x * x;
export const diag = (x, y) => sqrt(square(x) + square(y));

main.js

import { square, diag } from "./path/to/my-module";

console.log(square(11)); // 121
console.log(diag(4, 3)); // 5

    Другий спосіб - це явно вказати об'єкт з властивостями для експорту.

my-module.js

const sqrt = Math.sqrt;
const square = x => x * x;
const diag = (x, y) => sqrt(square(x) + square(y));

export { square, diag };

main.js

import { square, diag } from "./path/to/myModule";

console.log(square(11)); // 121
console.log(diag(4, 3)); // 5

    Наступний синтаксис імпортує всі експорти модуля як об'єкт із зазначеним ім'ям. Це називається namespace import.

main.js

import * as myModule from "./path/to/my-module";

console.log(myModule.square(11)); // 121
console.log(myModule.diag(4, 3)); // 5

    Default export.

    Часто модуль експортує всього одну сутність - такий експорт зручний для імпорту. Експорт за замовчуванням - 
найголовніше експортоване значення, яке може бути чим завгодно: змінною, функцією, класом тощо.

my-func.js

export default function myFunc() {
  // ...
}

my-class.js

export default class MyClass {
  // ...
}

main.js

import myFunc from "./path/to/my-func";
import MyClass from "./path/to/my-class";

myFunc();

const inst = new MyClass();

    Використовуйте іменований експорт, якщо необхідно експортувати декілька сутностей, а експорт за замовчуванням - 
для експорту однієї сутності. Хоча і можливо використовувати експорт за замовчуванням та іменований експорт в одному 
файлі, хорошою практикою буде вибрати тільки один стиль для кожного модуля.

-------------------------------------------------------------------------------------------------------------------------

    Знайомство з Webpack.

    Webpack - це збирач JS-модулів, менеджер модульних залежностей, який аналізує дерево залежностей і створює один або 
декілька результуючих файлів, що містять всю кодову базу проекту. Вибудовує порядок підключення модулів, збирає, 
мініфікує, запаковує та багато іншого.

    Webpack став одним із найважливіших інструментів веб-розробника. В першу чергу - це менеджер модульних залежностей 
застосунку і збирач JS-файлів, але він може трансформувати усі ресурси (HTML і CSS, SASS тощо), оптимізувати зображення,
компілювати шаблони, запускати локальний веб-сервер для розробки і багато іншого.

    Принцип роботи.

    Припустимо, у нас є застосунок, який може виконувати дві прості математичні задачі: підсумовувати і множити.
Ми вирішили розділити ці функції на окремі файли (модулі) для спрощення підтримки кодової бази. Таким чином, 
в index.html скрипти будуть підключені у такій послідовності.

index.html

<script src="sum.js"></script>
<script src="multiply.js"></script>
<script src="index.js"></script>

    Припустимо код з sum.js використовується в multiply.js та index.js, а код з multiply.js використовується тільки в 
index.js. Покажемо ієрархію залежностей на простій діаграмі.

    Якщо помилитися в послідовності підключення скриптів в index.html, тобто якщо index.js підключений перед будь-якою 
з інших залежностей або якщо sum.js доданий після multiply.js - виникнуть помилки. Тепер уявімо, що ми масштабуємо це 
до реального, повністю робочого застосунку - можуть бути сотні залежностей. Збереження порядку підключення буде жахом.

    Webpack перетворює залежності в модулі і зшиє в один або декілька файлів. Кожен модуль буде мати закритий простір 
імен і підключатися у потрібний час і правильному порядку.    

    Gulp все ще займає гідне місце в інструментарії розробника і для деяких проектів функціонал Webpack не потрібен, 
хоча він може бездоганно працювати разом із ним. Попри те, що крива навчання може бути вищою у разі складніших 
налаштувань, Webpack - незамінний, якщо ви використовуєте сучасні бібліотеки і фреймворки для розробки, такі як React, 
Vue, Angular тощо.


    Налаштування.

    За посиланнями нижче ви знайдете вичерпні інструкції з покроковими поясненнями налаштування Webpack.

    https://www.taniarascia.com/how-to-use-webpack/

    https://webpack.js.org/concepts/


