    Об'єктна модель документа.

    Коли ми працюємо з браузером, доступний функціонал складається з декількох модулів, оскільки JavaScript не 
має інструментів для роботи з браузером.

    Об'єктна модель документа (Document Object Model) - незалежний від мови інтерфейс для роботи з HTML-документом. 
Містить набір властивостей і методів, що дозволяють шукати, створювати і видаляти елементи, реагувати на дії користувача 
і багато іншого. Тобто з'єднує сторінку з мовою програмування.

    DOM - це відображення HTML-документа, деревоподібна структура, в якій кожен вузол - це JavaScript-об'єкт з 
властивостями і методами, що становить частину HTML-документа. Кожен елемент в документі, весь документ в цілому, 
заголовок, посилання, абзац - це частини DOM цього документа, тому всі вони можуть бути змінені з JavaScript-коду.

    Об'єктна модель браузера (Browser Object Model) - незалежний від мови інтерфейс для роботи з вкладкою браузера. 
Містить набір властивостей і методів, що дозволяють отримати доступ безпосередньо до поточної вкладки і ряду функцій 
браузера. Містить об'єкт роботи з історією навігації, місцем розташування та багато іншого.

    HTML-документ і DOM.

    Згідно з DOM-моделлю, кожен тег утворює окремий елемент-вузол, кожен фрагмент тексту - текстовий елемент. 
HTML-документ - це ієрархічне дерево, в якому у кожного елемента (крім кореневого) є тільки один батьківський елемент, 
тобто елемент, всередині якого він розташовується. Це дерево утворюється за рахунок вкладеної структури тегів і 
текстових елементів.

    Щоб відобразити HTML-документ, браузер спочатку перетворює його у формат, який він розуміє - DOM. Рушій браузера 
має спеціальний фрагмент коду - HTML-парсер, який використовується для перетворення HTML в DOM.

    В HTML вкладеність визначає відносини батько-дитина між елементами. В DOM об'єкти пов'язані у деревоподібній 
структурі даних, фіксуючи ці відносини.

    Браузер будує DOM поступово, щойно надходять перші фрагменти коду, він починає парсити HTML, додаючи вузли у 
деревоподібну структуру.

    Після того, як DOM-дерево побудовано, у ньому можна знайти елемент за допомогою JavaScript і виконувати з ним 
певні дії, оскільки кожен елемент має інтерфейс з безліччю властивостей і методів.

    DOM-дерево.

    Візуалізуємо дерево HTML-документа, використовуючи сервіс https://software.hixie.ch/utilities/js/live-dom-viewer/

    <!DOCTYPE html>
<html>
  <head>
    <title>Document title</title>
  </head>
  <body>
    <h1>Page title</h1>
    <ul>
      <li><a href="#">Link 1</a></li>
      <li><a href="#">Link 2</a></li>
    </ul>
  </body>
</html>

    У цьому дереві виділені два типи вузлів.

    Вузли-елементи (element node) - утворюються тегами, звичайним чином одні елементи вкладені в інші. Структура 
дерева утворена виключно за рахунок них.
    Текстові вузли (text node) - утворюються текстом всередині елементів. Текстовий вузол містить тільки рядок тексту 
і не може мати дочірніх елементів, тобто він завжди на найнижчому рівні ієрархії. Пробіли і перенесення рядків - це 
теж текстові вузли.


    ЦІКАВО.

    З цього правила є винятки: пробіли до head ігноруються, а будь-який вміст після body не створює елемент, 
браузер переносить його в кінець 'body'.

-------------------------------------------------------------------------------------------------------------------------

    Навігація по DOM.

    DOM надає широкий спектр можливостей для роботи з елементом і його вмістом, але для цього, спочатку потрібно 
отримати посилання на нього. Доступ до DOM починається з об'єкта document, з нього можна дістатися до будь-яких 
елементів.

    ЦІКАВО.

    document - це частина глобального об'єкта window, який доступний у скрипті, коли він виконується в браузері. 
Так само як alert, console.log, prompt і багато інших.

    Елементи DOM-дерева мають ієрархічне відношення один до іншого. Для опису відносин використовуються терміни 
предок (ancestor), нащадок (descendant), батько (parent), дитина (child) і сусід (sibling).

- Найвищий елемент називається кореневим (root node).
- Кожен елемент, крім кореневого, має тільки одного батьківського.
- У елемента може бути скільки завгодно дітей.
- Сусіди - це елементи зі спільним батьківським елементом.
- Дочірні елементи (діти) - елементи, які знаходяться безпосередньо всередині поточного (перша вкладеність).
- Нащадки - усі елементи, які знаходяться у поточному, разом з їхніми дітьми, дітьми їхніх дітей тощо. 
Тобто все на зразок дерева.

    Для навігації по цій ієрархії елементи мають наступні властивості.

- elem.parentNode - вибере батьківський elem.
- elem.childNodes - псевдомасив, зберігає всі дочірні елементи, включно з текстовими.
- elem.children - псевдомасив, зберігає тільки дочірні вузли-елементи, тобто ті, що відповідають тегам.
- elem.firstChild - вибере перший дочірній елемент всередині elem, включно з текстовими вузлами.
- elem.firstElementChild - вибере перший дочірній вузол-елемент всередині elem.
- elem.lastChild - вибере останній дочірній елемент всередині elem, включно з текстовими вузлами.
- elem.lastElementChild - вибере останній дочірній вузол-елемент всередині elem.
- elem.previousSibling - вибере елемент «зліва» від elem (його попереднього сусіда).
- elem.previousElementSibling - вибере вузол-елемент «зліва» від elem (його попереднього сусіда).
- elem.nextSibling - вибере елемент «праворуч» від elem (його наступного сусіда)
- elem.nextElementSibling - вибере вузол-елемент «праворуч» від elem (його наступного сусіда).

    Відкрий цей приклад в окремому вікні і подивися логи в консолі розробника.

    HTML

    <ul>
  <li>First item</li>
  <li>Second item</li>
  <li>Third item</li>
  <li>Fourth item</li>
  <li>Fifth item</li>
</ul>


JS

console.log(document);

const body = document.body;
console.log(body);

const list = body.firstElementChild;
console.log(list);

const firstListItem = list.firstElementChild;
console.log(firstListItem);

const listItems = list.children;
console.log(listItems);


Results

First item
Second item
Third item
Fourth item
Fifth item

    ЦІКАВО.

DOM-колекції, як-от childNodes і children - псевдомасиви (NodeList), у них немає більшості методів масиву.

-------------------------------------------------------------------------------------------------------------------------

    Пошук елементів.

    Отже, ми вже знаємо що DOM-елемент - це об'єкт з властивостями і методами. Саме час навчитися швидко знаходити 
елемент за довільним CSS-селектором. Група методів elem.querySelector* - це сучасний стандарт для пошуку елементів. 
Вони дозволяють знайти елемент або групу елементів за CSS-селектором будь-якої складності.

element.querySelector(selector);

    Використовується, якщо необхідно знайти тільки один, найчастіше унікальний елемент.

- Повертає перший знайдений елемент всередині element, що відповідає CSS-селектору selector.
- Якщо нічого не знайдено, поверне null.

element.querySelectorAll(selector);

    Використовується, якщо необхідно знайти колекцію елементів, тобто отримати масив посилань на елементи з однаковим 
селектором. Наприклад, всі елементи списку з класом menu-item.

- Повертає псевдомасив всіх елементів всередині element, які відповідають CSS-селектору selector.
- Якщо нічого не знайдено, поверне порожній масив.

    Відкрий цей приклад в окремому вікні і подивися логи в консолі розробника.

HTML

<ul id="menu" class="menu">
  <li class="menu-item">home</li>
  <li class="menu-item">about</li>
  <li class="menu-item">gallery</li>
  <li>blog</li>
</ul>

JS

const listWithId = document.querySelector('#menu');
listWithId.style.textTransform = 'uppercase';
listWithId.style.fontSize = '24px';
console.log(listWithId);

const listWithClass = document.querySelector('.menu');
console.log(listWithClass);

const menuItemsByTagName = document.querySelectorAll("li");
console.log(menuItemsByTagName);

const menuItemsByClass = document.querySelectorAll(".menu-item");
console.log(menuItemsByClass);

const firstMenuItem = document.querySelector(".menu-item");
firstMenuItem.style.color = 'tomato';
console.log(firstMenuItem);

Results

HOME
ABOUT
GALLERY
BLOG

-------------------------------------------------------------------------------------------------------------------------

    Властивості та атрибути.

    Під час побудови DOM-дерева, деякі стандартні HTML-атрибути стають властивостями елементів. Подивимося на 
декілька властивостей, які часто використовуються.

- value - містить поточний текстовий контент елементів форм.
- checked - зберігає стан чекбокса або радіокнопки.
- name - зберігає значення, вказане в HTML-атрибуті name.
- src - шлях до зображення тегу <img>.

HTML

<textarea id="message" class="materialize-textarea" rows="5">Default textarea message</textarea>

<div>
  <a href="/home" class="btn">home</a>
  <a href="/about" class="btn active">about</a>
  <a href="/gallery" class="btn">gallery</a>
</div>

<br>
<img class="image" src="https://placeimg.com/640/480/animals" alt="" width="320" />


CSS

body {
  margin: 24px;
}

JS

//===================================================
const message = document.querySelector("#message");
console.log(message.value); // Default textarea message

//===================================================
const activeLink = document.querySelector(".btn.active");
console.log(activeLink.href); // https://s.codepen.io/about

//===================================================
const image = document.querySelector(".image");
console.log(image.src); // https://placeimg.com/640/480/animals
image.src = 'https://placeimg.com/640/480/tech';


    Властивість textContent.

    elem.textContent повертає текстовий контент всередині елемента. Доступний для читання і запису. 
Неважливо, що буде передано в textContent, дані завжди будуть записані як текст.





